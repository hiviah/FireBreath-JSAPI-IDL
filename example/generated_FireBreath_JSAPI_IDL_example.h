
/*
 * AUTOGENERATED FILE
 * Generator: JSAPI_IDL_compiler.py
 */

#ifndef H_generated_FireBreath_JSAPI_IDL_example
#define H_generated_FireBreath_JSAPI_IDL_example

#include <string>
#include <vector>

#include "variant.h"

#include "APITypes.h"

namespace TLSAjs
{

enum DNSSECStatus
{
    INSECURE = 0,
    SECURE = 1,
    BOGUS = 2
};

enum CertUsage
{
    CA_CERT_PIN = 0,
    EE_CERT_PIN = 1,
    CA_TA_ADDED = 2,
    EE_TA_ADDED = 3
};

enum MatchingType
{
    EXACT = 0,
    SHA256 = 1,
    SHA512 = 2
};

enum Selector
{
    FULL = 0,
    SPKI = 1
};

enum DANEPolicy
{
    ALLOW_TYPE_01 = 1,
    ALLOW_TYPE_23 = 2
};


struct ResolvedTLSA
{
	/*! No-member-fill constructor. */
	ResolvedTLSA() {}

	/*! Constructor setting all member fields. */
	ResolvedTLSA(CertUsage certUsage, Selector selector, MatchingType matchingType, const std::string& association, const std::string& associationHex);

	/*! Virtual destructor to make inherited virtual methods possible */
	virtual ~ResolvedTLSA() {}

	/* API function to convert to JSAPI object passable to javascript */
	virtual FB::variant toVariant() const;

	/* Member fields */
	CertUsage certUsage;
	Selector selector;
	MatchingType matchingType;
	std::string association;
	std::string associationHex;
};



struct TLSALookupResult
{
	/*! No-member-fill constructor. */
	TLSALookupResult() {}

	/*! Constructor setting all member fields. */
	TLSALookupResult(int result, const std::string& errorStr, int rcode, DNSSECStatus dnssecStatus, const std::vector< ResolvedTLSA >& tlsa);

	/*! Virtual destructor to make inherited virtual methods possible */
	virtual ~TLSALookupResult() {}

	/* API function to convert to JSAPI object passable to javascript */
	virtual FB::variant toVariant() const;

	/* Member fields */
	int result;
	std::string errorStr;
	int rcode;
	DNSSECStatus dnssecStatus;
	std::vector< ResolvedTLSA > tlsa;
};



struct DANEMatch
{
	/*! No-member-fill constructor. */
	DANEMatch() {}

	/*! Constructor setting all member fields. */
	DANEMatch(bool successful, bool abort, const std::string& errorStr, const std::string& derCert, const std::string& pemCert, const ResolvedTLSA& tlsa);

	/*! Virtual destructor to make inherited virtual methods possible */
	virtual ~DANEMatch() {}

	/* API function to convert to JSAPI object passable to javascript */
	virtual FB::variant toVariant() const;

	/* Member fields */
	bool successful;
	bool abort;
	std::string errorStr;
	std::string derCert;
	std::string pemCert;
	ResolvedTLSA tlsa;
};


}

#endif /* H_generated_FireBreath_JSAPI_IDL_example */
